{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 LucidaGrande;\f4\fnil\fcharset0 HelveticaNeue-Italic;\f5\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;\red255\green255\blue255;\red184\green14\blue61;
\red247\green238\blue241;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c78039\c14510\c30588;
\cssrgb\c97647\c94902\c95686;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid3\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid4\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl420\sa200\partightenfactor0

\f0\b\fs40 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Recitation Project\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\partightenfactor0
\ls1\ilvl0
\f1\b0\fs28 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Design, implement and test a C++ class to work with real numbers as rational numbers.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The data members are the numerator and denominator, stored as integers.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 We have no need for setters or getters (aka mutators or accessors) in the Rational class. All of our operations on rational numbers involve the entired number, not just the numerator or denominator.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Implement the operators:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl300\partightenfactor0
\ls1\ilvl1
\f2\b\fs25\fsmilli12600 \cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <<
\f1\b0\fs28 \cf2 \cb3 \strokec2 \'a0and\'a0
\f2\b\fs25\fsmilli12600 \cf4 \cb5 \strokec4 >>
\f1\b0\fs28 \cf2 \cb3 \strokec2 \'a0(i.e., input and output).\
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl320\partightenfactor0
\ls1\ilvl2\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f3 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Rational numbers are read and written as an integer, followed by a slash, followed by an integer.\cb1 \
\ls1\ilvl2\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f3 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Either (or both) of the numerator and the denominator may be input as negative integers. The following are all possible inputs: 1/2, -1/-2, -1/2 and 1/-2.\cb1 \
\ls1\ilvl2\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f3 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It's a design decision as to when to "normalize" a rational number. Should it always be normalized? Or is that only a choice to be made when we dispaly it?\
\pard\tx2380\tx2880\pardeftab720\li2880\fi-2880\sl320\partightenfactor0
\ls1\ilvl3\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f3 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 We will\'a0
\f0\b maintain the numbers in their normalized form
\f1\b0 \'a0at all times.\cb1 \
\ls1\ilvl3\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f3 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Thus when they are first created, they must be stored as normalized and any operation that might change a number must also normalize it.\cb1 \
\ls1\ilvl3\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f3 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What does "normalize" mean? The numerator and denominator will be in "lowest terms"\'a0
\f4\i and
\f1\i0 \'a0only the numerator may be negative. For example, if we were given as input 4/-8, we would store and display it as -1/2. Simililarly -8/-6 would turn into 4/3.\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl300\partightenfactor0
\ls1\ilvl1
\f2\b\fs25\fsmilli12600 \cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 +=
\f1\b0\fs28 \cf2 \cb3 \strokec2 \'a0Implement as a member function, aka\'a0
\f4\i method
\f1\i0 .\cb1 \
\ls1\ilvl1
\f2\b\fs25\fsmilli12600 \cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 +
\f1\b0\fs28 \cf2 \cb3 \strokec2 \'a0Implement (i.e., addition) as a non-member function that calls the\'a0
\f5\fs25\fsmilli12600 \cf4 \cb5 \strokec4 +=
\f1\fs28 \cf2 \cb3 \strokec2 \'a0operator.\'a0\ul Do not\ulnone \'a0make\'a0
\f5\fs25\fsmilli12600 \cf4 \cb5 \strokec4 +
\f1\fs28 \cf2 \cb3 \strokec2 \'a0a friend. (There is no reason to.)\cb1 \
\ls1\ilvl1
\f2\b\fs25\fsmilli12600 \cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 ==
\f1\b0\fs28 \cf2 \cb3 \strokec2 \'a0Implement as a non-member.\cb1 \
\ls1\ilvl1
\f2\b\fs25\fsmilli12600 \cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 !=
\f1\b0\fs28 \cf2 \cb3 \strokec2 \'a0Implement as a non-member, but not as a friend.\cb1 \
\ls1\ilvl1
\f2\b\fs25\fsmilli12600 \cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 ++
\f1\b0\fs28 \cf2 \cb3 \strokec2 \'a0and\'a0
\f2\b\fs25\fsmilli12600 \cf4 \cb5 \strokec4 --\
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl320\partightenfactor0
\ls1\ilvl2
\f1\b0\fs28 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f3 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Both pre- and post-.\cb1 \
\ls1\ilvl2\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f3 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Member for\'a0
\f5\fs25\fsmilli12600 \cf4 \cb5 \strokec4 ++
\f1\fs28 \cf2 \cb1 \strokec2 \
\ls1\ilvl2\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f3 \uc0\u9642 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Non-member, non-friend for\'a0
\f5\fs25\fsmilli12600 \cf4 \cb5 \strokec4 --
\f1\fs28 \cf2 \cb1 \strokec2 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl300\partightenfactor0
\ls1\ilvl1
\f5\fs25\fsmilli12600 \cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <
\f1\fs28 \cf2 \cb3 \strokec2 \'a0non-member\cb1 \
\ls1\ilvl1
\f5\fs25\fsmilli12600 \cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <=
\f1\fs28 \cf2 \cb3 \strokec2 ,\'a0
\f5\fs25\fsmilli12600 \cf4 \cb5 \strokec4 >
\f1\fs28 \cf2 \cb3 \strokec2 \'a0and\'a0
\f5\fs25\fsmilli12600 \cf4 \cb5 \strokec4 >=
\f1\fs28 \cf2 \cb3 \strokec2 \'a0Implement as\'a0
\f0\b non-member and non-friend
\f1\b0 .\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Make it possible to write\'a0
\f2\b\fs25\fsmilli12600 \cf4 \cb5 \strokec4 if (r) \{\}
\f1\b0\fs28 \cf2 \cb3 \strokec2 , where\'a0
\f5\fs25\fsmilli12600 \cf4 \cb5 \strokec4 r
\f1\fs28 \cf2 \cb3 \strokec2 \'a0is a Rational number. The test will evaluate to\'a0
\f5\fs25\fsmilli12600 \cf4 \cb5 \strokec4 false
\f1\fs28 \cf2 \cb3 \strokec2 \'a0if the numerator is zero and\'a0
\f5\fs25\fsmilli12600 \cf4 \cb5 \strokec4 true
\f1\fs28 \cf2 \cb3 \strokec2 \'a0otherwise.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 We provide two files\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl320\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f3 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 testRational.cpp to test your class. Can you think of additional tests to write?\cb1 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f3 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 gcd.cpp: to compute the greatest common divisor of two non-negative integers, that should be useful for writing the normalize function. If you're clever, try to write this function yourself before looking at ours.\cb1 \
}